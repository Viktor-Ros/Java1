package Cast;

/*
 * 
 * ПРИВЕДЕНИЕ ССЫЛОЧНЫХ ТИПОВ
 * 
 * классы: CastObject
 * Приведение работает тольок с объектами, которые связаны между собой наследованием
 * Используется для расширение функционала объектов
 * Объект класса можно сохранить в переменную любого из его типов родителей:
 * 1. Animal animal - Создается ссылка на экземпляр класса Анимал
 * 2. new Tiger() - Создается экземпляр класс Тигр
 * 3. Animal animal = new Tiger(); - Ссылке экземпляра Анимал присваеивается экземпляр Тигр (Так можно потому что Анимал родитель Тигра - это называется полиморфизм)
 * 
 * Расширение типа(восходящее преобразование или upcasting) - преобразование при котором присваивание происходит вверх по цепочке (к типу Object)
 * upcasting ограничивает поведение объекта только тем, что умеет делать родитель
 * Сужение типа(нисходящее преобразование или dawncasting) - преобразование при котором присваивание происходит вниз по цепочке(от типа Object)
 * dawncasting расширяет поведение объекта тем, что умеет делать наследник
 * 
 * Ссылку на объект всегда можно сохранить в переменную любого его базового типа(Объект-потомок всегда можно присвоить в переменную-предка)
 * 
 */

public class CastObject {

	public static void main(String[] args) {

		
		  //Расширение типов:
		  Tiger tiger = new Tiger();
		  Cat cat = new Tiger();// присваивание объект класса Tiger переменной с типом класса Cat(родителя класса Tiger)
		  						// Кошка барсик = новый Тигр();  - любой тигр это кошка
		  						// переменная Cat будет ссылаться объект Tiger, как в случае с числом byte, которое легко становиться int
		  						// расширяем класс Tiger до класса Cat
		  						// объект cat не может вызывать методы класса Tiger
		  Animal animal = new Tiger();
		  Object obj = new Tiger();
		  
		  
		  //Сужение типов
		  Object object = new Tiger();
		  Animal animal1 = (Animal) object;//присваиваем объект класса Object переменной с типом класса наследника Animal
		  								   //сужаем класс Object до класса Animal
		  								   //(Animal) - оператор преобразования типа
		  Cat cat1 = (Cat) object;
		  Tiger tiger1 = (Tiger) animal1;
		  Tiger tiger2 = (Tiger) cat1;
		  
		  
		  Cat cat2 = new Tiger();//Ссылку на объект всегда можно сохранить в переменную любого его базового типа
		  						 //Объект не изменяется! Изменяется только количество методов, которое можно вызвать с помощью конкретной переменной-ссылки.

		  Animal animal2 = cat2;
		  Object obj2 = cat2;
		  
	}
	
	static class Animal
	{
	  public void doAnimalActions(){}
	}
	static class Cat extends Animal
	{
	  public void doCatActions(){}
	}
	static class Tiger extends Cat
	{
	  public void doTigerActions(){}
	}

}
